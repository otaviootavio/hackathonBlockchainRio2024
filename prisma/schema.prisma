generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    isOwner       Boolean       @default(false)
    accounts      Account[]
    sessions      Session[]
    profile       UserProfile?
    participants  Participant[]
    userProfileId String?       @unique
}

model UserProfile {
    id     String @id @default(cuid())
    name   String
    wallet String @unique
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
    id                   String        @id @default(uuid())
    name                 String
    description          String
    totalPrice           Int
    isOpen               Boolean       @default(true)
    participants         Participant[]
    isReadyForSettlement Boolean       @default(false)
    hasSettled           Boolean       @default(false)
}

model Participant {
    id        String   @id @default(uuid())
    payed     Boolean
    role      String
    weight    Int
    roomId    String
    userId    String
    createdAt DateTime @default(now())
    room      Room     @relation(fields: [roomId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    profileId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model WebhookEvent {
    id          String   @id @default(cuid())
    payloadId   String   @unique
    referenceId String   @unique
    signed      Boolean?
    txid        String?
    status      String   @default("pending")
    userId      String?
    roomId      String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
