generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    userProfile   UserProfile?
    Room          Room[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id                   String        @id @default(uuid())
    name                 String
    description          String
    totalPrice           Int
    isOpen               Boolean       @default(true)
    participants         Participant[]
    isReadyForSettlement Boolean       @default(false) // true when owner says that the room is ready to settle, then no more modifications can be made
    hasSettled           Boolean       @default(false) // true when all participants have settled
    ownerId              String
    owner                User          @relation(fields: [ownerId], references: [id])
}

model Participant {
    id            String      @id @default(uuid())
    payed         Boolean
    role          String
    weight        Int
    roomId        String
    userId        String
    room          Room        @relation(fields: [roomId], references: [id])
    createdAt     DateTime    @default(now())
    userProfileId String
    userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
}

model UserProfile {
    id          String        @id @default(cuid())
    name        String
    wallet      String
    userId      String        @unique
    user        User          @relation(fields: [userId], references: [id])
    Participant Participant[]
}

model WebhookEvent {
    id          String   @id @default(cuid())
    payloadId   String   @unique
    referenceId String   @unique
    signed      Boolean?
    txid        String? // Nullable because rejected transactions won't have a txid
    status      String   @default("pending") // New field for tracking status
    userId      String? // Nullable, as we might not always have userId initially
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
